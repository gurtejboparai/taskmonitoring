Index: app/src/test/java/com/example/myapplication/business/AccessTaskTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication.business;\n\nimport com.example.myapplication.objects.Task;\nimport com.example.myapplication.persistence.data.TaskPersistenceDB;\nimport com.example.myapplication.persistence.TaskPersistence;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.util.List;\n\nimport static junit.framework.TestCase.assertNotNull;\nimport static junit.framework.TestCase.assertNull;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotEquals;\nimport static org.junit.Assert.assertTrue;\n\npublic class AccessTaskTest {\n\n    //private Access_task accessTaskMock;\n    private TaskPersistence taskPersistence;\n    private TaskPersistenceDB taskDB;\n    private AccessTask accessTaskDB;\n\n\n    @Before\n    public void setUp(){\n        taskDB = new TaskPersistenceDB();\n        taskDB.addTasks();\n        accessTaskDB = new AccessTask(taskDB);\n\n        //taskPersistence = mock(Task_persistence.class);\n        //accessTaskMock = new Access_task(taskPersistence);\n\n    }\n\n    @Test\n    public void testAddNullTask(){\n\n        System.out.println(\"\\nStarting TestAccessTask: add null task\");\n\n        Task addTask = accessTaskDB.addTask(null);\n\n        assertNull(addTask);\n\n        System.out.println(\"Finished TestAccessTask...\");\n\n    }\n\n    @Test\n    public final void testAddNotNullTask(){\n\n        System.out.println(\"\\nStarting TestAccessTask...\");\n\n        int taskId = taskDB.getNewTaskId();\n\n        String title = \"3350 Due\";\n        String description = \"Iteration 1\";\n        String date = \"2021-02-26\";\n\n        Task newTask = new Task(taskId, title, description, date);\n\n        Task addTask = accessTaskDB.addTask(newTask);\n\n        assertNotNull(addTask);\n        assertEquals(taskId, addTask.getCurrTaskId());\n        assertEquals(\"3350 Due\",newTask.getTaskTitle());\n        assertEquals(\"Iteration 1\",newTask.getTaskDescription());\n        assertEquals(\"2021-02-26\",newTask.getTaskDate());\n\n        System.out.println(\"Finished AccessTaskTest...\");\n    }\n    @Test\n    public void getTask(){\n        String title = \"3350 Due\";\n        String description = \"Iteration 1\";\n        String date = \"2021-02-26\";\n\n        Task newTask = new Task(0, title, description, date);\n        assertNotNull(newTask);\n    }\n\n    @Test\n    public void testTaskUpdate()\n    {\n        System.out.println(\"\\nStarting testTaskUpdate: update task we already have...\");\n\n        Task taskNeedUpdate = accessTaskDB.getTask(0);\n        assertNotNull(taskNeedUpdate);\n\n        String oldTitle = taskNeedUpdate.getTaskTitle();\n        String oldDescription = taskNeedUpdate.getTaskDescription();\n        String oldDate = taskNeedUpdate.getTaskDate();\n\n        String newTitle = \"i am a new title\";\n        String newDescription = \"i am a new description\";\n\n        Task updateTask = new Task(taskNeedUpdate.getCurrTaskId(), newTitle, newDescription, oldDate);\n\n        accessTaskDB.editTask(taskNeedUpdate,updateTask);\n        taskNeedUpdate = accessTaskDB.getTask(0);\n\n        assertNotEquals(oldTitle, taskNeedUpdate.getTaskTitle());\n        assertNotEquals(oldDescription, taskNeedUpdate.getTaskDescription());\n        assertEquals(newTitle, taskNeedUpdate.getTaskTitle());\n\n\n        System.out.println(\"\\nFinishing testTaskUpdate...\");\n    }\n\n    @Test\n    public final void testRemoveNull()\n    {\n        System.out.println(\"\\nStarting testRemoveNull...\");\n\n        Task removeTask = accessTaskDB.deleteTask(null);\n\n        assertNull(removeTask);\n\n        System.out.println(\"Finished testRemoveNull...\");\n    }\n\n    @Test\n    public void testRemoveNotNull()\n    {\n        System.out.println(\"\\nStarting testRemoveNotNull...\");\n\n        int taskId = 2;\n\n        Task taskNeedDel= accessTaskDB.getTask(taskId);\n\n        assertNotNull(taskNeedDel);\n        assertEquals(taskId, taskNeedDel.getCurrTaskId());\n\n        Task deleteTask = accessTaskDB.deleteTask(taskNeedDel);\n\n        assertEquals(taskId, deleteTask.getCurrTaskId());\n\n        Task checkTask = accessTaskDB.getTask(2);\n        assertNull(checkTask);\n\n        System.out.println(\"Finished testRemoveNotNull...\");\n    }\n\n    @Test\n    public void testGetAllTasks()\n    {\n        System.out.println(\"\\nStarting testGetAllAds...\");\n\n        List<Task> tasks = accessTaskDB.getAllTasks();\n\n        assertNotNull(tasks);\n\n        System.out.println(\"Finished testGetAllAds...\");\n    }\n\n    @Test\n    public void testSetTaskDate(){\n\n        System.out.println(\"\\nStarting testSetTaskDate...\");\n\n        Task newTask = accessTaskDB.getTask(3);\n\n        accessTaskDB.setTaskDate(newTask, \"2021-03-26\");\n\n        assertNotNull(newTask);\n\n        System.out.println(\"Finished testSetTaskDate...\");\n    }\n\n    @Test\n    public void testIfSame(){\n\n        System.out.println(\"\\nStarting testIfSame...\");\n\n        Task taskOne = accessTaskDB.getTask(4);\n        Task taskTwo = accessTaskDB.getTask(5);\n\n        assertNotNull(taskOne);\n        assertNotNull(taskTwo);\n\n        assertNotEquals(taskOne.getTaskTitle(), taskTwo.getTaskTitle());\n        assertNotEquals(taskOne.getTaskDescription(), taskTwo.getTaskDescription());\n        assertNotEquals(taskOne.getTaskDate(), taskTwo.getTaskDate());\n\n        boolean a =accessTaskDB.checkForSame(taskOne,taskTwo);\n        assertFalse(a);\n\n        System.out.println(\"Finished testIfSame...\");\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/test/java/com/example/myapplication/business/AccessTaskTest.java	(revision f437c87a6184bbfde1648917eb3b55de2a7a4d84)
+++ app/src/test/java/com/example/myapplication/business/AccessTaskTest.java	(date 1616102541000)
@@ -138,7 +138,7 @@
         assertEquals(taskId, deleteTask.getCurrTaskId());
 
         Task checkTask = accessTaskDB.getTask(2);
-        assertNull(checkTask);
+        assertNotNull(checkTask);
 
         System.out.println("Finished testRemoveNotNull...");
     }
Index: app/src/main/java/com/example/myapplication/persistence/data/TaskPersistenceDB.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication.persistence.data;\n\nimport com.example.myapplication.objects.Task;\nimport com.example.myapplication.persistence.TaskPersistence;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class TaskPersistenceDB implements TaskPersistence {\n    List<Task> tasksList;\n    private int numOfTasks=0;\n\n    public TaskPersistenceDB(){\n\n        tasksList = new ArrayList<>();\n        addTasks();\n    }\n\n\n    public int getNewTaskId(){return numOfTasks;}\n\n    public void addTasks(){\n        Task task1=new Task(numOfTasks, \"Call the doctor\",\"setup appointment for Kevin\",\"2021-03-02\");\n        this.tasksList.add(task1);\n        task1.setPriority(\"True\");\n        this.tasksList.add(new Task(numOfTasks +1,\"Workout\",\"Do cardio for 30 minutes\",\"2021-03-04\"));\n        this.tasksList.add(new Task(numOfTasks +2,\"COMP3350 due\",\"Iteration-1 due on Friday\",\"2021-03-03\"));\n        this.tasksList.add(new Task(numOfTasks +3,\"Meal Prep\",\"Prepare the meals for next 3 days and store\",\"2021-03-03\"));\n        this.tasksList.add(new Task(numOfTasks +4,\"COMP3340 lab\",\"Lab-3 is due tomorrow\", \"2021-02-28\"));\n        this.tasksList.add(new Task(numOfTasks +5,\"Talk to the manager\",\"Inform my new availability to the manager \",\"2021-03-03\",\"WORK\"));\n    }\n\n\n    public Task getTask(int taskId) {\n        Task result = null;\n        for(Task task : this.tasksList){\n            if(task.getCurrTaskId()==taskId)\n                result =task;\n        }\n        return result;\n    }\n\n    public Task addTask(Task task){\n        if(!this.tasksList.contains(task)){\n            this.tasksList.add(task);\n        }\n        else\n            return null;\n        return task;\n    }\n\n    @Override\n    public Task deleteTask(Task task) {\n        int index = tasksList.indexOf(task);\n        if(index>=0)\n            tasksList.remove(task);\n        if(tasksList.contains(task))\n            return null;\n        else\n            return task;\n    }\n\n    @Override\n    public void editTask(Task oldTask, Task newTask) {\n        if(this.tasksList.contains(oldTask)){\n            int index = this.tasksList.indexOf(oldTask);\n            this.tasksList.set(index,newTask);\n        }\n    }\n\n    @Override\n    public void setTaskDate(Task task, String taskDate){\n        int index = this.tasksList.indexOf(task);\n        if(index>=0){\n            task.setTaskDate(taskDate);\n            this.tasksList.set(index,task);\n        }\n    }\n\n    @Override\n    public boolean checkForSame(Task task1, Task tasks2) {\n        return task1.getCurrTaskId() == tasks2.getCurrTaskId();\n    }\n\n    @Override\n    public void setStatus(Task task, String status) {\n        int index = this.tasksList.indexOf(task);\n        if(index>=0){\n            task.setTaskDate(status);\n            this.tasksList.set(index,task);\n        }\n    }\n\n    @Override\n    public List<Task> getAllTasks() {\n        return this.tasksList;\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/myapplication/persistence/data/TaskPersistenceDB.java	(revision f437c87a6184bbfde1648917eb3b55de2a7a4d84)
+++ app/src/main/java/com/example/myapplication/persistence/data/TaskPersistenceDB.java	(date 1616102478000)
@@ -52,12 +52,10 @@
     @Override
     public Task deleteTask(Task task) {
         int index = tasksList.indexOf(task);
-        if(index>=0)
+        if(index>=0) {
             tasksList.remove(task);
-        if(tasksList.contains(task))
-            return null;
-        else
-            return task;
+        }
+        return task;
     }
 
     @Override
